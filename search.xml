<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LIS-LCS学习笔记</title>
      <link href="//post/LIS-LCS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
      <url>//post/LIS-LCS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="LIS"><a href="#LIS" class="headerlink" title="LIS"></a>LIS</h1><p>最长上升子序列（longest  increasing subsequence），也可以叫最长非降序子序列，简称LIS，不是太难。即一个数的序列bi，当b1 &lt; b2 &lt; … &lt; bS的时候，我们称这个序列是上升的。对于给定的一个序列(a1, a2, …, aN)，我们可以得到一些上升的子序列(ai1, ai2, …, aiK)，这里1 &lt;&#x3D; i1 &lt; i2 &lt; … &lt; iK &lt;&#x3D; N，但必须按照一定。比如，对于序列(1, 7, 3, 5, 9, 4, 8)，有它的一些上升子序列，如(1, 7), (3, 4, 8)等等。这些子序列中最长的长度是4，比如子序列(1, 3, 5, 8)。</p><h2 id="解法1：朴素DP"><a href="#解法1：朴素DP" class="headerlink" title="解法1：朴素DP"></a>解法1：朴素DP</h2><div class="tabs" id="liti"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="liti-1">例题：题意描述</button><button type="button" class="tab " data-href="liti-2">输入、输出格式/样例</button><button type="button" class="tab " data-href="liti-3">提示</button><button type="button" class="tab " data-href="liti-4">解法提示</button><button type="button" class="tab " data-href="liti-5">标准解法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="liti-1"><p>这是一个简单的动规板子题。</p><p>给出一个由 n(n&lt;&#x3D; 5000) 个不超过 1000000 的正整数组成的序列。请输出这个序列的<strong>最长上升子序列</strong>的长度。</p><p>最长上升子序列是指，从原序列中<strong>按顺序</strong>取出一些数字排在一起，这些数字是<strong>逐渐增大</strong>的。</p></div><div class="tab-item-content" id="liti-2"><p><strong>输入格式</strong></p><p>第一行，一个整数 n，表示序列长度。</p><p>第二行有 n 个整数，表示这个序列。</p><p><strong>输出格式</strong></p><p>一个整数表示答案。</p><p><strong>样例 #1</strong></p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 2 4 1 3 4</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="liti-3"><p>分别取出 1、2、3、4 即可。</p></div><div class="tab-item-content" id="liti-4"><p>状态转移方程：**dp[i]&#x3D;max{1+dp[j]} (0&lt;&#x3D;j&lt;i,a[j]&lt;a[i])</p><p>边界： dp[0]&#x3D;0</p><p>目标：max{dp[i]} (1&lt;&#x3D;i&lt;&#x3D;n)</p><p>时间复杂度：O(n^2)</p><div class="tip info"><p>下面的标准解法是LIS的<strong>模板</strong>！</p></div></div><div class="tab-item-content" id="liti-5"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101110</span>;</span><br><span class="line"><span class="type">int</span> n,dp1[N],a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        dp1[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])&#123;</span><br><span class="line">                dp1[i]=<span class="built_in">max</span>(dp1[i],dp1[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,dp1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="解法2：贪心-二分优化（lower-bound，upper-bound）"><a href="#解法2：贪心-二分优化（lower-bound，upper-bound）" class="headerlink" title="解法2：贪心+二分优化（lower_bound，upper_bound）"></a>解法2：贪心+二分优化（lower_bound，upper_bound）</h2><div class="tabs" id="liti2"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="liti2-1">例题：题意描述</button><button type="button" class="tab " data-href="liti2-2">输入、输出格式/样例</button><button type="button" class="tab " data-href="liti2-3">提示</button><button type="button" class="tab " data-href="liti2-4">解法提示</button><button type="button" class="tab " data-href="liti2-5">标准解法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="liti2-1"><p>某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。</p><p>输入导弹依次飞来的高度，计算这套系统最多能拦截多少导弹，如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。</p></div><div class="tab-item-content" id="liti2-2"><p><strong>输入格式</strong></p><p>一行，若干个整数，中间由空格隔开。</p><p><strong>输出格式</strong></p><p>两行，每行一个整数，第一个数字表示这套系统最多能拦截多少导弹，第二个数字表示如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。</p><p><strong>样例 #1</strong></p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">389 207 155 300 299 170 158 65</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="liti2-3"><p>对于前 50% 数据（NOIP 原题数据），满足导弹的个数不超过 10^4 个。该部分数据总分共 100 分。可使用O(n^2)做法通过。<br>对于后 50% 的数据，满足导弹的个数不超过 10^5 个。该部分数据总分也为 100 分。请使用O(n\log n)做法通过。</p><p>对于全部数据，满足导弹的高度为正整数，且不超过 $5\times 10^4$。</p><p>此外本题开启 spj，每点两问，按问给分。</p><p>NOIP1999 提高组 第一题</p><hr><p>upd 2022.8.24：新增加一组 Hack 数据。</p></div><div class="tab-item-content" id="liti2-4"><p>二分优化。</p></div><div class="tab-item-content" id="liti2-5"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">100001</span>],n=<span class="number">1</span>,ans,pos,a[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 提升cin、cout效率</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;a[n]) n++;</span><br><span class="line">n--;</span><br><span class="line">dp[ans]=INT_MAX;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=dp[ans]) dp[++ans]=a[i];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//upper_bound表示找到第一个大于查找值的元素指针，</span></span><br><span class="line"><span class="comment">//加上greater&lt;int&gt;()就反过来了，表示找到第一个小于查找值的元素指针 </span></span><br><span class="line">pos=<span class="built_in">upper_bound</span>(dp,dp+ans+<span class="number">1</span>,a[i],<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;())-dp;  </span><br><span class="line">dp[pos]=a[i];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line"><span class="comment">//Dilworth定理：最长不升子序列的最小划分，等于最长上升子序列的长度 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;dp[ans]) dp[++ans]=a[i];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pos=<span class="built_in">lower_bound</span>(dp,dp+ans+<span class="number">1</span>,a[i])-dp;</span><br><span class="line">dp[pos]=a[i];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><details class="folding-tag" ><summary> 更多习题 </summary>              <div class='content'>              <p>ACW1016  登山，LG2196  [NOIP1996 提高组] 挖地雷，ACW1013  挖地雷，LG2782  友好城市</p>              </div>            </details><h1 id="最大连续字段和"><a href="#最大连续字段和" class="headerlink" title="最大连续字段和"></a>最大连续字段和</h1><p>对于长度为n的一列数，求出连续的m个区间的和的最大值，每个区间不能重叠，即不能出现i1 &lt; i2 &lt; j1 的情况。</p><div class="tabs" id="liti"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="liti-1">例题：题意描述</button><button type="button" class="tab " data-href="liti-2">输入、输出格式/样例</button><button type="button" class="tab " data-href="liti-3">提示</button><button type="button" class="tab " data-href="liti-4">解法提示</button><button type="button" class="tab " data-href="liti-5">标准解法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="liti-1"><p>给出一个长度为 n 的序列 a，选出其中连续且非空的一段使得这段和最大。</p></div><div class="tab-item-content" id="liti-2"><p>输入格式<br>第一行是一个整数，表示序列的长度 n。</p><p>第二行有 n 个整数，第 i 个整数表示序列的第 i 个数字 a-i 。</p><p>输出格式</p><p>输出一行一个整数表示答案。</p><p><strong>样例 #1</strong></p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">2 -4 3 -1 2 -4 3</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="liti-3"><p>样例 1 解释</p><p>选取 $[3, 5]$ 子段 ${3, -1, 2}$，其和为 $4$。</p><p>数据规模与约定</p><ul><li>对于 $40%$ 的数据，保证 $n \leq 2 \times 10^3$。</li><li>对于 $100%$ 的数据，保证 $1 \leq n \leq 2 \times 10^5$，$-10^4 \leq a_i \leq 10^4$。</li></ul></div><div class="tab-item-content" id="liti-4"><p>这道题有3种做法：暴力，O(n^3)；暴力+前缀和，O(n^2)，<strong>DP</strong>。</p><p>f[i]表示以a[i]为终点（连续区间的右边界）的子序列的最大和。</p></div><div class="tab-item-content" id="liti-5"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200010</span>],x[<span class="number">200010</span>];</span><br><span class="line"><span class="type">int</span> sum=<span class="number">-100000001</span>;<span class="comment">//初始值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">-145</span> &amp;&amp; n==<span class="number">2000</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;-100&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">x[<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">x[i]=<span class="built_in">max</span>(x[i<span class="number">-1</span>]+a[i],x[i]);<span class="comment">//遍历，把每段字段和加到一起</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,x[i]);<span class="comment">//取最大</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><details class="folding-tag" ><summary> 更多习题 </summary>              <div class='content'>              <p>LG1982 小朋友的数字</p>              </div>            </details><h1 id="LCS（Substring和Subsequence）"><a href="#LCS（Substring和Subsequence）" class="headerlink" title="LCS（Substring和Subsequence）"></a>LCS（Substring和Subsequence）</h1><p>先将最长公共子序列。</p><p>最长公共子序列，指找出 2 个或多个字符串中的最长公共子序列。</p><p>如字符串<code>s1=kabc</code>和<code>s2=taijc</code>，其最长公共子序列是<code>ac</code>。</p><div class="tip info"><p>子序列只要求其中字符保持和原字符串中一样的顺序，而不一定连续。</p></div><div class="tabs" id="liti"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="liti-1">例题：题意描述</button><button type="button" class="tab " data-href="liti-2">输入、输出格式/样例</button><button type="button" class="tab " data-href="liti-3">提示</button><button type="button" class="tab " data-href="liti-4">解法提示</button><button type="button" class="tab " data-href="liti-5">标准解法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="liti-1"><p>设 A 和 B 是两个字符串。我们要用最少的字符操作次数，将字符串 A 转换为字符串 B。这里所说的字符操作共有三种：</p><ol><li>删除一个字符；</li><li>插入一个字符；</li><li>将一个字符改为另一个字符。</li></ol><p>A, B 均只包含小写字母。</p></div><div class="tab-item-content" id="liti-2"><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行为字符串 $A$；第二行为字符串 $B$；字符串 $A, B$ 的长度均小于 $2000$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>只有一个正整数，为最少字符操作次数。</p><p><strong>样例 #1</strong></p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sfdqxbw</span><br><span class="line">gfdgw</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="liti-3"><p>对于 $100 %$ 的数据，$1 \le |A|, |B| \le 2000$。</p></div><div class="tab-item-content" id="liti-4"><p>最长公共子序列模版。</p></div><div class="tab-item-content" id="liti-5"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10001</span>;</span><br><span class="line">string a,b;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 提升cin、cout效率</span></span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">//cin.tie(nullptr);</span></span><br><span class="line">    <span class="comment">//cout.tie(nullptr);</span></span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="type">int</span> len1=a.<span class="built_in">size</span>(),len2=b.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len1;i++) f[i][<span class="number">0</span>]=i;<span class="comment">//删除i个字符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len2;i++) f[<span class="number">0</span>][i]=i;<span class="comment">//添加i个字符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len1;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=len2;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>]==b[j<span class="number">-1</span>]) f[i][j]=f[i<span class="number">-1</span>][j<span class="number">-1</span>];<span class="comment">//相同</span></span><br><span class="line"><span class="keyword">else</span> f[i][j]=<span class="built_in">min</span>(<span class="built_in">min</span>(f[i<span class="number">-1</span>][j],f[i][j<span class="number">-1</span>]),f[i<span class="number">-1</span>][j<span class="number">-1</span>])+<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;f[len1][len2]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><p>现在将最长公共子串。</p><p>最长公共子串（Longest Common Substring）与最长公共子序列（Longest Common Subsequence）的区别： 子串要求在原字符串中是连续的，而子序列则只需保持相对顺序，并不要求连续。例如X &#x3D; {a, Q, 1, 1}; Y &#x3D; {a, 1, 1, d, f}那么，{a, 1, 1}是X和Y的最长公共子序列，但不是它们的最长公共字串。</p><p>例题就算了……（因为找不到）</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p><a href="https://zhuanlan.zhihu.com/p/68409952">https://zhuanlan.zhihu.com/p/68409952</a></p></li><li><p><a href="https://blog.csdn.net/lxt_Lucia/article/details/81209962">https://blog.csdn.net/lxt_Lucia/article/details/81209962</a></p></li></ul><p>使用的特殊代码段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提升cin、cout效率</span></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure><p>版权所有©Minecraft-Sep。</p>]]></content>
      
      
      <categories>
          
          <category> 竞赛笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客域名开发公告</title>
      <link href="//post/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E5%BC%80%E5%8F%91%E5%85%AC%E5%91%8A.html"/>
      <url>//post/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E5%BC%80%E5%8F%91%E5%85%AC%E5%91%8A.html</url>
      
        <content type="html"><![CDATA[<h1 id="所有的访问者们"><a href="#所有的访问者们" class="headerlink" title="所有的访问者们"></a>所有的访问者们</h1><h2 id="本人的博客已开发多个接口"><a href="#本人的博客已开发多个接口" class="headerlink" title="本人的博客已开发多个接口"></a>本人的博客已开发多个接口</h2><h3 id="之后也会继续开发更好的接口"><a href="#之后也会继续开发更好的接口" class="headerlink" title="之后也会继续开发更好的接口!"></a>之后也会继续开发更好的接口!</h3><p>详细说明:</p><table><thead><tr><th align="center">名称</th><th align="center"><a href="https://minecraft-sep.github.io/">Github</a></th><th align="center"><a href="https://minecraftsep.gitee.io/">Gitee</a></th><th align="center"><a href="https://minecraftsep.codeberg.page/">Codeberg</a></th><th align="center"><a href="https://minecraftsep-github-io.vercel.app/">Vercel</a></th><th align="center"><a href="https://minecraftsep.pages.dev/">CloudFlare</a></th></tr></thead><tbody><tr><td align="center"><strong>推荐访问指数</strong></td><td align="center">👍👍👍👍</td><td align="center">👍👍</td><td align="center">👍👍👍👍</td><td align="center">👍</td><td align="center">👍👍👍👍</td></tr><tr><td align="center">启动时间(完全加载完毕)</td><td align="center">约25s</td><td align="center">&#x2F;</td><td align="center">约15s</td><td align="center">超时</td><td align="center">约2s</td></tr><tr><td align="center">更新频率</td><td align="center">约1days&#x2F;次</td><td align="center">&#x2F;</td><td align="center">约2~5days&#x2F;次</td><td align="center">约1days&#x2F;次</td><td align="center">约1days&#x2F;次</td></tr><tr><td align="center">是否需要加速器</td><td align="center">建议需要</td><td align="center">&#x2F;</td><td align="center">不需要</td><td align="center">需要</td><td align="center">不需要</td></tr><tr><td align="center">Bug</td><td align="center">0</td><td align="center">&#x2F;</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">是否完善</td><td align="center">是</td><td align="center">&#x2F;</td><td align="center">是</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">Pages完成度</td><td align="center">100%</td><td align="center">&#x2F;</td><td align="center">100%</td><td align="center">98.3%</td><td align="center">100%</td></tr><tr><td align="center">是否免费</td><td align="center">是</td><td align="center">&#x2F;</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">备注</td><td align="center">&#x2F;</td><td align="center">未开放</td><td align="center">&#x2F;</td><td align="center"><a href="https://zhuanlan.zhihu.com/p/660865097">访问方法</a></td><td align="center">&#x2F;</td></tr></tbody></table><p>兄弟们根据需要访问把，反正我是看好Github Pages和cloudflare的👍</p><h2 id="2024-5-2gen更新"><a href="#2024-5-2gen更新" class="headerlink" title="2024&#x2F;5&#x2F;2gen更新"></a>2024&#x2F;5&#x2F;2gen更新</h2>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-04-12周赛总结笔记</title>
      <link href="//post/2024-04-12%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0.html"/>
      <url>//post/2024-04-12%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-12周赛总结"><a href="#4-12周赛总结" class="headerlink" title="4.12周赛总结"></a>4.12周赛总结</h1><h2 id="总叙"><a href="#总叙" class="headerlink" title="总叙"></a>总叙</h2><p>难度$\color{orange}适中$，但是我发挥的不好，主要还是<strong>模版没记牢</strong></p><h2 id="T1-B3635-硬币问题"><a href="#T1-B3635-硬币问题" class="headerlink" title="T1 B3635 硬币问题"></a>T1 B3635 硬币问题</h2><h3 id="题目链接-这里"><a href="#题目链接-这里" class="headerlink" title="题目链接:这里"></a>题目链接:<a href="https://www.luogu.com.cn/problem/B3635">这里</a></h3><h3 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h3><p>动态规划,dp;动态规划初步</p><h3 id="难点"><a href="#难点" class="headerlink" title="难点:"></a>难点:</h3><p>容易与<strong>完全背包</strong>混淆</p><h3 id="比赛时的自己的思路-想法"><a href="#比赛时的自己的思路-想法" class="headerlink" title="比赛时的自己的思路&#x2F;想法"></a>比赛时的自己的思路&#x2F;想法</h3><p>用完全背包一个个去凑，凑出n</p><h3 id="是否AC，若没有，错在哪里了"><a href="#是否AC，若没有，错在哪里了" class="headerlink" title="是否AC，若没有，错在哪里了"></a>是否AC，若没有，错在哪里了</h3><p>NO!整道题都理解错了，根本不是背包问题，普通的DP就可以（<del>我是傻子</del>）</p><h3 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h3><p><img src="https://s21.ax1x.com/2024/04/15/pFv58Re.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll dp[<span class="number">1000001</span>],a[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">11</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">1145141919810</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">0</span>;<span class="comment">//边界 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=a[i];j&lt;=n;j++)&#123;</span><br><span class="line">dp[j]=<span class="built_in">min</span>(dp[j],dp[j-a[i]]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T2-P1510-精卫填海"><a href="#T2-P1510-精卫填海" class="headerlink" title="T2 P1510 精卫填海"></a>T2 P1510 精卫填海</h3><h3 id="题目链接-这里-1"><a href="#题目链接-这里-1" class="headerlink" title="题目链接:这里"></a>题目链接:<a href="https://www.luogu.com.cn/problem/P1510">这里</a></h3><h3 id="考点：-1"><a href="#考点：-1" class="headerlink" title="考点："></a>考点：</h3><p>模拟;动态规划,dp;背包</p><h3 id="难点-1"><a href="#难点-1" class="headerlink" title="难点:"></a>难点:</h3><p>几乎没有……</p><h3 id="比赛时的自己的思路-想法-1"><a href="#比赛时的自己的思路-想法-1" class="headerlink" title="比赛时的自己的思路&#x2F;想法"></a>比赛时的自己的思路&#x2F;想法</h3><p>用多重背包去取，直到体力值用光</p><h3 id="是否AC，若没有，错在哪里了-1"><a href="#是否AC，若没有，错在哪里了-1" class="headerlink" title="是否AC，若没有，错在哪里了"></a>是否AC，若没有，错在哪里了</h3><p>NO!背包那一块出现了一点问题（好像是模版不太对，还是思路不对）</p><h3 id="正确思路-1"><a href="#正确思路-1" class="headerlink" title="正确思路"></a>正确思路</h3><p><img src="https://s21.ax1x.com/2024/04/15/pFvoTbR.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">100005</span>],b[<span class="number">100005</span>],f[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> v,n,c;</span><br><span class="line">cin&gt;&gt;v&gt;&gt;n&gt;&gt;c;</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=c-b[i];j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">f[j+b[i]]=<span class="built_in">max</span>(f[j+b[i]],f[j]+a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i]&gt;=v)&#123;</span><br><span class="line">cout&lt;&lt;c-i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3-P1833-樱花"><a href="#T3-P1833-樱花" class="headerlink" title="T3 P1833 樱花"></a>T3 P1833 樱花</h3><h3 id="题目链接-这里-2"><a href="#题目链接-这里-2" class="headerlink" title="题目链接:这里"></a>题目链接:<a href="https://www.luogu.com.cn/problem/P1833">这里</a></h3><h3 id="考点：-2"><a href="#考点：-2" class="headerlink" title="考点："></a>考点：</h3><p>动态规划,dp;背包</p><h3 id="难点-2"><a href="#难点-2" class="headerlink" title="难点:"></a>难点:</h3><p>计算时间，其他几乎没有……</p><h3 id="比赛时的自己的思路-想法-2"><a href="#比赛时的自己的思路-想法-2" class="headerlink" title="比赛时的自己的思路&#x2F;想法"></a>比赛时的自己的思路&#x2F;想法</h3><p>用多重背包去取，直到体力值用光</p><h3 id="是否AC，若没有，错在哪里了-2"><a href="#是否AC，若没有，错在哪里了-2" class="headerlink" title="是否AC，若没有，错在哪里了"></a>是否AC，若没有，错在哪里了</h3><p>NO!最后几分钟写不完了……</p><h3 id="正确思路-2"><a href="#正确思路-2" class="headerlink" title="正确思路"></a>正确思路</h3><p><img src="https://img.zshfoj.com/891f8fbf6f6ed8c70d63bfb4f41d342693bbdd75ff8101604953bddd7a849f27.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,w[<span class="number">6</span>*N],v[<span class="number">6</span>*N],s[<span class="number">6</span>*N],len,dp[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x1,x2,y1,y2;<span class="comment">//x1:x2 y1:y2</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d:%d %d:%d %d&quot;</span>,&amp;x1,&amp;x2,&amp;y1,&amp;y2,&amp;n);</span><br><span class="line">m=(y1-x1)*<span class="number">60</span>+(y2-x2);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">0</span>)&#123;</span><br><span class="line">w[++len]=a;</span><br><span class="line">v[len]=b;</span><br><span class="line">s[len]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">w[++len]=a*j;</span><br><span class="line">v[len]=b*j;</span><br><span class="line">s[len]=j;</span><br><span class="line">c-=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c&gt;<span class="number">0</span>)&#123;</span><br><span class="line">w[++len]=a*c;</span><br><span class="line">v[len]=b*c;</span><br><span class="line">s[len]=c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=w[i];j&lt;=m;j++)&#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=w[i];j--)&#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[m]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T4-P1759通天之潜水"><a href="#T4-P1759通天之潜水" class="headerlink" title="T4 P1759通天之潜水"></a>T4 P1759通天之潜水</h3><h3 id="题目链接-这里-3"><a href="#题目链接-这里-3" class="headerlink" title="题目链接:这里"></a>题目链接:<a href="https://www.luogu.com.cn/problem/P1759">这里</a></h3><h3 id="考点：-3"><a href="#考点：-3" class="headerlink" title="考点："></a>考点：</h3><p>动态规划,dp</p><h3 id="难点-3"><a href="#难点-3" class="headerlink" title="难点:"></a>难点:</h3><p>输出路径</p><h3 id="比赛时的自己的思路-想法-3"><a href="#比赛时的自己的思路-想法-3" class="headerlink" title="比赛时的自己的思路&#x2F;想法"></a>比赛时的自己的思路&#x2F;想法</h3><p>先计算总共可以用多久，计算过程中用<code>s[i][j</code>]记录最后输出</p><h3 id="是否AC，若没有，错在哪里了-3"><a href="#是否AC，若没有，错在哪里了-3" class="headerlink" title="是否AC，若没有，错在哪里了"></a>是否AC，若没有，错在哪里了</h3><p>NO!计算路径那里炸了……</p><h3 id="正确思路-3"><a href="#正确思路-3" class="headerlink" title="正确思路"></a>正确思路</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10005</span>;</span><br><span class="line"><span class="type">int</span> m,v,n,a[N],b[N],c[N];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2005</span>][<span class="number">2005</span>],p[<span class="number">2005</span>][<span class="number">2005</span>][<span class="number">105</span>];<span class="comment">//p[][][]保存路径 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fg</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> k)</span></span>&#123;<span class="comment">//保存路径函数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=p[j-a[i]][k-b[i]][<span class="number">0</span>];l++)</span><br><span class="line">p[j][k][l]=p[j-a[i]][k-b[i]][l];</span><br><span class="line">p[j][k][<span class="number">0</span>]=p[j-a[i]][k-b[i]][<span class="number">0</span>]+<span class="number">1</span>;<span class="comment">//更新路径长度 </span></span><br><span class="line">p[j][k][p[j][k][<span class="number">0</span>]]=i;<span class="comment">//记录编号 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;m,&amp;v,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a[i],&amp;b[i],&amp;c[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=a[i];j--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=v;k&gt;=b[i];k--)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[j-a[i]][k-b[i]]+c[i]&gt;dp[j][k])&#123;<span class="comment">//比较选与不选的更优值 </span></span><br><span class="line">dp[j][k]=dp[j-a[i]][k-b[i]]+c[i];</span><br><span class="line"><span class="built_in">fg</span>(i,j,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[j-a[i]][k-b[i]]+c[i]==dp[j][k])&#123;<span class="comment">//正好相等，比较 </span></span><br><span class="line"><span class="type">bool</span> fl=<span class="number">1</span>;</span><br><span class="line">p[j-a[i]][k-b[i]][p[j-a[i]][k-b[i]][<span class="number">0</span>]+<span class="number">1</span>]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=<span class="built_in">min</span>(p[j-a[i]][k-b[i]][<span class="number">0</span>]+<span class="number">1</span>,p[j][k][<span class="number">0</span>]);l++)&#123;<span class="comment">//取min，更小 </span></span><br><span class="line"><span class="keyword">if</span>(p[j-a[i]][k-b[i]][l]&lt;p[j][k][l])&#123;<span class="comment">//如果更小 </span></span><br><span class="line"><span class="built_in">fg</span>(i,j,k);<span class="comment">//继续找更小的 </span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[j-a[i]][k-b[i]][l]&gt;p[j][k][l])&#123;<span class="comment">//如果更大 </span></span><br><span class="line">fl=<span class="number">0</span>;<span class="comment">//记录，推出 </span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[j-a[i]][k-b[i]][<span class="number">0</span>]+<span class="number">1</span>&lt;p[j][k][<span class="number">0</span>]&amp;&amp;fl)&#123;<span class="comment">//再次比较确认是否有结果 </span></span><br><span class="line"><span class="built_in">fg</span>(i,j,k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dp[m][v]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=p[m][v][<span class="number">0</span>];i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[m][v][i]);<span class="comment">//输出 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.zshfoj.com/c83f6f02aa94d545d29d339c2e74be1fa46a0359da151bc7e229c17853a0e276.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll m,v,n,a[<span class="number">101</span>],b[<span class="number">101</span>],c[<span class="number">101</span>],f[<span class="number">10001</span>][<span class="number">10001</span>];</span><br><span class="line">string s[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;v&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=a[i];j--)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=v;k&gt;=b[i];k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[j][k]&lt;f[j-a[i]][k-b[i]]+c[i]||(f[j][k]==f[j-a[i]][k-b[i]]+c[i]&amp;&amp;s[j][k]&gt;s[j-a[i]][k-b[i]]+<span class="built_in">char</span>(i)))<span class="comment">//强制转字符</span></span><br><span class="line">&#123;</span><br><span class="line">f[j][k]=f[j-a[i]][k-b[i]]+c[i];</span><br><span class="line">s[j][k]=s[j-a[i]][k-b[i]]+<span class="built_in">char</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;f[m][v]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s[m][v].<span class="built_in">size</span>();i++)</span><br><span class="line">cout&lt;&lt;<span class="built_in">int</span>(s[m][v][i])&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>要好好记录错题，多练习DP有关的题目</p>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 竞赛总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-03-30竞赛笔记&amp;周赛总结笔记</title>
      <link href="//post/2024-03-30%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0&amp;%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0.html"/>
      <url>//post/2024-03-30%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0&amp;%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="2024-3-30"><a href="#2024-3-30" class="headerlink" title="2024&#x2F;3&#x2F;30"></a>2024&#x2F;3&#x2F;30</h1><p>先放个图搞笑一下awa</p><p><a href="https://imgse.com/i/pFTtJaR"><img src="https://s21.ax1x.com/2024/03/30/pFTtJaR.png" alt="pFTtJaR.png"></a></p><p>又双叒叕放2个好东西……</p><p><a href="https://www.luogu.com.cn/paste/ptj1wm4k">JIYU万能密码</a></p><p><a href="https://lglg.top/user/942118">我的LGLG.TOP</a></p><h2 id="正片"><a href="#正片" class="headerlink" title="正片"></a>正片</h2><h3 id="T1药剂实验"><a href="#T1药剂实验" class="headerlink" title="T1药剂实验"></a>T1药剂实验</h3><p>(这题<strong>暴力</strong>也可以啊哈哈哈)</p><p><a href="https://imgse.com/i/pFTtK2T"><img src="https://s21.ax1x.com/2024/03/30/pFTtK2T.jpg" alt="pFTtK2T.jpg"></a></p><p><img src="https://img.zshfoj.com/f51a6005adc1bca05e3baf4a771f2789fc642e87a743d02597fce5a4b4f3ba6a.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这做法怎么这么S*啊......</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> a,b,c,d,e,f,g,h,i,j,in,x=<span class="number">0</span>;  </span><br><span class="line">    cin&gt;&gt;in;  </span><br><span class="line">    <span class="keyword">for</span> (a=<span class="number">1</span>;a&lt;=<span class="number">3</span>;a++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;=<span class="number">3</span>;b++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">for</span> (c=<span class="number">1</span>;c&lt;=<span class="number">3</span>;c++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">for</span> (d=<span class="number">1</span>;d&lt;=<span class="number">3</span>;d++)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="keyword">for</span> (e=<span class="number">1</span>;e&lt;=<span class="number">3</span>;e++)  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        <span class="keyword">for</span> (f=<span class="number">1</span>;f&lt;=<span class="number">3</span>;f++)  </span><br><span class="line">                        &#123;  </span><br><span class="line">                            <span class="keyword">for</span> (g=<span class="number">1</span>;g&lt;=<span class="number">3</span>;g++)  </span><br><span class="line">                            &#123;  </span><br><span class="line">                                <span class="keyword">for</span>(h=<span class="number">1</span>;h&lt;=<span class="number">3</span>;h++)  </span><br><span class="line">                                &#123;  </span><br><span class="line">                                    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)  </span><br><span class="line">                                    &#123;  </span><br><span class="line">                                        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)  </span><br><span class="line">                                        &#123;  </span><br><span class="line">                                            <span class="keyword">if</span> (a+b+c+d+e+f+g+h+i+j==in)  </span><br><span class="line">                                            &#123;  </span><br><span class="line">                                                x++;  </span><br><span class="line">                                            &#125;  </span><br><span class="line">                                        &#125;  </span><br><span class="line">                                    &#125;  </span><br><span class="line">                                &#125;  </span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    cout&lt;&lt;x&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">for</span> (a=<span class="number">1</span>;a&lt;=<span class="number">3</span>;a++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;=<span class="number">3</span>;b++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">for</span> (c=<span class="number">1</span>;c&lt;=<span class="number">3</span>;c++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">for</span> (d=<span class="number">1</span>;d&lt;=<span class="number">3</span>;d++)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="keyword">for</span> (e=<span class="number">1</span>;e&lt;=<span class="number">3</span>;e++)  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        <span class="keyword">for</span> (f=<span class="number">1</span>;f&lt;=<span class="number">3</span>;f++)  </span><br><span class="line">                        &#123;  </span><br><span class="line">                            <span class="keyword">for</span> (g=<span class="number">1</span>;g&lt;=<span class="number">3</span>;g++)  </span><br><span class="line">                            &#123;  </span><br><span class="line">                                <span class="keyword">for</span>(h=<span class="number">1</span>;h&lt;=<span class="number">3</span>;h++)  </span><br><span class="line">                                &#123;  </span><br><span class="line">                                    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)  </span><br><span class="line">                                    &#123;  </span><br><span class="line">                                        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)  </span><br><span class="line">                                        &#123;  </span><br><span class="line">                                            <span class="keyword">if</span> (a+b+c+d+e+f+g+h+i+j==in)  </span><br><span class="line">                                            &#123;  </span><br><span class="line">                                                cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">                                                cout&lt;&lt;b&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">                                                cout&lt;&lt;c&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">                                                cout&lt;&lt;d&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">                                                cout&lt;&lt;e&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">                                                cout&lt;&lt;f&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">                                                cout&lt;&lt;g&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">                                                cout&lt;&lt;h&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">                                                cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">                                                cout&lt;&lt;j&lt;&lt;endl;  </span><br><span class="line">                                            &#125;  </span><br><span class="line">                                        &#125;  </span><br><span class="line">                                    &#125;  </span><br><span class="line">                                &#125;  </span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="T2装饰"><a href="#T2装饰" class="headerlink" title="T2装饰"></a>T2装饰</h3><p>完全没有想到是<strong>完全背包</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10001</span>];<span class="comment">//第i种花的数量</span></span><br><span class="line"><span class="type">int</span> f[<span class="number">114</span>][<span class="number">514</span>];<span class="comment">//前i种花在花盆数量为j的方案数</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//全部不放也是一种方案数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//物品 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;<span class="comment">//花盆数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=j&amp;&amp;k&lt;=a[i];k++)&#123;<span class="comment">//第i种花取k盆 </span></span><br><span class="line">f[i][j]=(f[i][j]+f[i<span class="number">-1</span>][j-k])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;f[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3星航补给"><a href="#T3星航补给" class="headerlink" title="T3星航补给"></a>T3星航补给</h3><p>又双叒叕是一个<strong>DFS</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,a[<span class="number">100001</span>],l,r,ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;n)&#123;</span><br><span class="line"><span class="keyword">if</span>(w&gt;=l)&#123;<span class="comment">//满足l~r</span></span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(w+a[x]&lt;=r)&#123;<span class="comment">//剪枝:质量没有超过r，说明装了可能还在l~r </span></span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>,w+a[x]);<span class="comment">//装 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T4乐队采购"><a href="#T4乐队采购" class="headerlink" title="T4乐队采购"></a>T4乐队采购</h3><p>nnd这题这么简单就AC了！降黄！降黄！降黄！降黄！降黄！降黄！降黄！</p><p><img src="https://img.zshfoj.com/7c51f631bd59fd272378169840edd75dd62b285c0f664bbd46caceaca5d408ad.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,s,ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> w,v;</span><br><span class="line">&#125;b[<span class="number">114514</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.v==y.v)&#123;<span class="comment">//重要度相等 </span></span><br><span class="line"><span class="keyword">return</span> x.w&lt;y.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.v&gt;y.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">s=m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;b[i].w&gt;&gt;b[i].v;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="type">int</span> x=<span class="number">1</span>;<span class="comment">//取第一个数组的下标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(m-b[i].w&gt;=<span class="number">0</span>)&#123;<span class="comment">//可以放 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(b[i].w-b[x].w)&lt;=<span class="number">3</span>) <span class="comment">//与最大的差是否小于3</span></span><br><span class="line"><span class="keyword">if</span>(b[i].w&gt;b[x].w) x=i;<span class="comment">//取最大值的下表</span></span><br><span class="line">m-=b[i].w;<span class="comment">//放</span></span><br><span class="line">ans+=b[i].v; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>没有发挥好（怎么都t*用DFS做啊，我正好不太会），继续努力！</p>]]></content>
      
      
      <categories>
          
          <category> 竞赛笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024.03.23初一编程马拉松赛赛后总结</title>
      <link href="//post/2024-03-23%E5%91%A8%E8%B5%9B%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93.html"/>
      <url>//post/2024-03-23%E5%91%A8%E8%B5%9B%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="2024-3-22-周赛总结"><a href="#2024-3-22-周赛总结" class="headerlink" title="2024&#x2F;3&#x2F;22 周赛总结"></a>2024&#x2F;3&#x2F;22 周赛总结</h1><h2 id="总分：55"><a href="#总分：55" class="headerlink" title="总分：55"></a>总分：55</h2><h2 id="T1-项目贡献度统计"><a href="#T1-项目贡献度统计" class="headerlink" title="T1 项目贡献度统计"></a>T1 项目贡献度统计</h2><h3 id="得分：10"><a href="#得分：10" class="headerlink" title="得分：10"></a>得分：<strong>10</strong></h3><h3 id="原题传送门：P1571"><a href="#原题传送门：P1571" class="headerlink" title="原题传送门：P1571"></a>原题传送门：<a href="https://www.luogu.com.cn/problem/P1571">P1571</a></h3><p>Q：❌原因？<br>A：想的都不对，本来想着用二分的（确实是对的），但是不知道为啥就用了搜索<br>Q：最佳做法？<br>A：<strong>模拟，二分，Maps</strong><br>Q：正确代码？<br>A：<br>1.（示例、题解）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m;</span><br><span class="line">ll l,r;<span class="comment">//二分用的 </span></span><br><span class="line">ll a[<span class="number">114514</span>],b[<span class="number">114514</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;b[i];</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>);<span class="comment">//对输入的B数组初次排序 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">l=<span class="number">1</span>;r=m;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(b[mid]==a[i])&#123;<span class="comment">//如果这个值在B数组出现过且与a[i]相同 </span></span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//输出 </span></span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳过 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b[mid]&lt;a[i]) l=mid+<span class="number">1</span>;<span class="comment">//如果数在右边 </span></span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;<span class="comment">//如果数在左边 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.（同学的）</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ce2hk57k.png"></p><h2 id="T2-山地探险"><a href="#T2-山地探险" class="headerlink" title="T2 山地探险"></a>T2 山地探险</h2><h3 id="得分：20"><a href="#得分：20" class="headerlink" title="得分：20"></a>得分：<strong>20</strong></h3><h3 id="原题传送门：P1434"><a href="#原题传送门：P1434" class="headerlink" title="原题传送门：P1434"></a>原题传送门：<a href="https://www.luogu.com.cn/problem/P1434">P1434</a></h3><p>Q：❌原因？<br>A：思考不正确（以为1是最低的）<br>Q：最佳做法？<br>A：<strong>DP，搜索，递归，搜索（记忆化）</strong><br>Q：正确代码？<br>A：<br>1.（示例、题解）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n,m,a[<span class="number">201</span>][<span class="number">201</span>],s[<span class="number">201</span>][<span class="number">201</span>],ans;</span><br><span class="line"><span class="type">bool</span> use[<span class="number">201</span>][<span class="number">201</span>];<span class="comment">//这个就是所谓的不需要</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[x][y])<span class="keyword">return</span> s[x][y];<span class="comment">//记忆化搜索</span></span><br><span class="line">    s[x][y]=<span class="number">1</span>;<span class="comment">//题目中答案是有包含这个点的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;  <span class="type">int</span> xx=dx[i]+x;</span><br><span class="line">       <span class="type">int</span> yy=dy[i]+y;<span class="comment">//四个方向</span></span><br><span class="line">       <span class="keyword">if</span>(xx&gt;<span class="number">0</span>&amp;&amp;yy&gt;<span class="number">0</span>&amp;&amp;xx&lt;=n&amp;&amp;yy&lt;=m&amp;&amp;a[x][y]&gt;a[xx][yy])&#123;</span><br><span class="line">         <span class="built_in">dfs</span>(xx,yy);</span><br><span class="line">          s[x][y]=<span class="built_in">max</span>(s[x][y],s[xx][yy]+<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<span class="comment">//同题目的R,C</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//找从每个出发的最长距离</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,<span class="built_in">dfs</span>(i,j));<span class="comment">//取最大值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// by 路人七</span></span><br></pre></td></tr></table></figure><p>2.（同学的）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll r,c,a[<span class="number">114</span>][<span class="number">114</span>],up[<span class="number">1145</span>][<span class="number">1145</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">d</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="comment">//记忆化搜索 </span></span><br><span class="line"><span class="keyword">if</span>(up[x][y]) <span class="keyword">return</span> up[x][y];<span class="comment">//如果搜过 直接使用保存的结果 </span></span><br><span class="line">up[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> tx=dx[i]+x,ty=dy[i]+y;</span><br><span class="line"><span class="keyword">if</span>(tx&gt;=<span class="number">1</span>&amp;&amp;tx&lt;=r&amp;&amp;ty&gt;=<span class="number">1</span>&amp;&amp;ty&lt;=c&amp;&amp;a[x][y]&gt;a[tx][ty])&#123;</span><br><span class="line"><span class="built_in">d</span>(tx,ty);</span><br><span class="line">up[x][y]=<span class="built_in">max</span>(up[x][y],up[tx][ty]+<span class="number">1</span>);<span class="comment">//判断最大滑多远</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> up[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;r&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">d</span>(i,j));</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3-山地探险"><a href="#T3-山地探险" class="headerlink" title="T3 山地探险"></a>T3 山地探险</h2><h3 id="得分：25"><a href="#得分：25" class="headerlink" title="得分：25"></a>得分：<strong>25</strong></h3><h3 id="原题传送门：P1023"><a href="#原题传送门：P1023" class="headerlink" title="原题传送门：P1023"></a>原题传送门：<a href="https://www.luogu.com.cn/problem/P1023">P1023</a></h3><p>Q：❌原因？<br>A：不理解题目意思<br>Q：最佳做法？<br>A：<strong>数学，枚举</strong><br>Q：正确代码？<br>A：</p><ol><li>（示例、题解）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100010</span>][<span class="number">3</span>];<span class="comment">//用于存放价格和销量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>,k,expect,down,max,temp,cha,xl,num,s,price,p;</span><br><span class="line">    cin&gt;&gt;expect;<span class="comment">//读入预期价</span></span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;a[i][<span class="number">1</span>]&gt;&gt;a[i][<span class="number">2</span>]&amp;&amp;a[i][<span class="number">1</span>]!=<span class="number">-1</span>&amp;&amp;a[i] [<span class="number">2</span>]!=<span class="number">-1</span>)<span class="comment">//如果输入的两个数不是-1，-1</span></span><br><span class="line">    &#123;</span><br><span class="line">    i++;<span class="comment">//循环变量i++</span></span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">2</span>&amp;&amp;a[i<span class="number">-1</span>][<span class="number">1</span>]-a[i<span class="number">-2</span>][<span class="number">1</span>]&gt;<span class="number">1</span>)<span class="comment">//如果两个价格之间差大于一</span></span><br><span class="line">    &#123;</span><br><span class="line">    i--;<span class="comment">//回到上一个读入的销量</span></span><br><span class="line">    cha=(a[i<span class="number">-1</span>][<span class="number">2</span>]-a[i][<span class="number">2</span>])/(a[i][<span class="number">1</span>]-a[i<span class="number">-1</span>][<span class="number">1</span>]);<span class="comment">//求出每次销量减少多少：销量差/价格差</span></span><br><span class="line">    temp=a[i][<span class="number">1</span>];<span class="comment">//记录下价格</span></span><br><span class="line">    <span class="keyword">for</span>(j=a[i<span class="number">-1</span>][<span class="number">1</span>]+<span class="number">1</span>;j&lt;=temp;j++)<span class="comment">//按价格递增顺序依次写入</span></span><br><span class="line">    &#123;</span><br><span class="line">    a[i][<span class="number">1</span>]=j;<span class="comment">//写入价格</span></span><br><span class="line">    a[i][<span class="number">2</span>]=a[i<span class="number">-1</span>][<span class="number">2</span>]-cha;<span class="comment">//按销量差写入销量</span></span><br><span class="line">    i++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;down;<span class="comment">//输入超过最大价格之后每次销量降低多少</span></span><br><span class="line">    i--;<span class="comment">//因为上面的while循环最后有i++所以用i--抵消……</span></span><br><span class="line">    xl=a[i][<span class="number">2</span>];<span class="comment">//记录目前的销量</span></span><br><span class="line">    <span class="keyword">while</span>(xl&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(xl-down&lt;<span class="number">0</span>)<span class="keyword">break</span>;<span class="comment">//如销量小于零则退出</span></span><br><span class="line">    <span class="keyword">else</span><span class="comment">//否则</span></span><br><span class="line">    &#123;</span><br><span class="line">    xl-=down;<span class="comment">//销量每次减掉down</span></span><br><span class="line">    i++;<span class="comment">//循环变量++</span></span><br><span class="line">    a[i][<span class="number">1</span>]=a[i<span class="number">-1</span>][<span class="number">1</span>]+<span class="number">1</span>;<span class="comment">//每次价格+1</span></span><br><span class="line">    a[i][<span class="number">2</span>]=xl;<span class="comment">//销量就是xl</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10000</span>;j++)<span class="comment">//该遍历了，因为收税相当于补贴*-1所以记录一下符号即可</span></span><br><span class="line">    &#123;</span><br><span class="line">    max=<span class="number">-99999</span>;<span class="comment">//用于存储最大的总利润</span></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=i;k++)<span class="comment">//每次扫一遍每一种价格</span></span><br><span class="line">    &#123;</span><br><span class="line">    num=(a[k][<span class="number">1</span>]-a[<span class="number">1</span>][<span class="number">1</span>]+j)*a[k][<span class="number">2</span>];<span class="comment">//套公式算出总利润</span></span><br><span class="line">    <span class="keyword">if</span>(num&gt;=max)<span class="comment">//如果总利润比目前最大的大</span></span><br><span class="line">    &#123;</span><br><span class="line">        max=num;<span class="comment">//更新max</span></span><br><span class="line">    price=a[k][<span class="number">1</span>];<span class="comment">//记录下价格</span></span><br><span class="line">    p=<span class="number">1</span>;<span class="comment">//记录下符号</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(price==expect)&#123;cout&lt;&lt;j*p;<span class="keyword">return</span> <span class="number">0</span>;&#125;<span class="comment">//如果价格就是政府预期价则打印出来，因为本身就是从小到大遍历所以不用求绝对值最小的</span></span><br><span class="line">    max=<span class="number">-99999</span>;<span class="comment">//后面是收税，原理同上</span></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=i;k++)</span><br><span class="line">    &#123;</span><br><span class="line">    num=(a[k][<span class="number">1</span>]-a[<span class="number">1</span>][<span class="number">1</span>]-j)*a[k][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(num&gt;=max)</span><br><span class="line">    &#123;</span><br><span class="line">       max=num;</span><br><span class="line">    price=a[k][<span class="number">1</span>];</span><br><span class="line">    p=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(price==expect)&#123;cout&lt;&lt;j*p;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前面有了return 0;这儿就不用了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>（老师的）</li></ol><p><a href="https://www.luogu.com.cn/article/l675luh4">代码</a></p><h2 id="T4-下棋"><a href="#T4-下棋" class="headerlink" title="T4 下棋"></a>T4 下棋</h2><h3 id="得分：0"><a href="#得分：0" class="headerlink" title="得分：0"></a>得分：<strong>0</strong></h3><h3 id="原题传送门：P1259"><a href="#原题传送门：P1259" class="headerlink" title="原题传送门：P1259"></a>原题传送门：<a href="https://www.luogu.com.cn/problem/P1259">P1259</a></h3><p>Q：❌原因？<br>A：没有做（太复杂了）<br>Q：最佳做法？<br>A：<strong>递归、分治</strong><br>Q：正确代码？<br>A：</p><ol><li>（示例、题解）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">205</span>];<span class="comment">//存储棋子的状态</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">char</span> &amp;a, <span class="type">char</span> &amp;b)</span><span class="comment">//交换函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;<span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n + <span class="number">2</span>; i++)</span><br><span class="line">        <span class="built_in">putchar</span>(ch[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">movechess</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//移动棋子</span></span><br><span class="line">    <span class="built_in">swap</span>(ch[start], ch[end]);</span><br><span class="line">    <span class="built_in">swap</span>(ch[start + <span class="number">1</span>], ch[end + <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">output</span>();</span><br><span class="line">&#125;</span><br><span class="line">string out[<span class="number">4</span>] = &#123;<span class="string">&quot;ooo*o**--*&quot;</span>, <span class="string">&quot;o--*o**oo*&quot;</span>, <span class="string">&quot;o*o*o*--o*&quot;</span>, <span class="string">&quot;--o*o*o*o*&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//打表qwq</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        ch[i] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &lt; <span class="number">2</span> * n; i++)</span><br><span class="line">        ch[i] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    ch[<span class="number">2</span> * n] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    ch[<span class="number">2</span> * n + <span class="number">1</span>] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="comment">//打印初始状态</span></span><br><span class="line">    <span class="built_in">output</span>();</span><br><span class="line">    <span class="type">int</span> len = n;</span><br><span class="line">    <span class="comment">//需要移动的黑/白棋子</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">movechess</span>(len - <span class="number">1</span>, <span class="number">2</span> * len);</span><br><span class="line">        <span class="comment">//中间的 &quot;o*&quot; 与 &quot;--&quot; 交换</span></span><br><span class="line">        len--;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">3</span>)</span><br><span class="line">        <span class="comment">//不符合上述规律,开始输出打表内容</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">movechess</span>(len, <span class="number">2</span> * len);</span><br><span class="line">        <span class="comment">//最左边的 &quot;**&quot; 与 &quot;--&quot; 交换</span></span><br><span class="line">    &#125;</span><br><span class="line">    string ss;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">4</span>; i++)</span><br><span class="line">        ss += <span class="string">&quot;o*&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        cout &lt;&lt; out[i] &lt;&lt; ss &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>（同学的）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n; </span><br><span class="line">for(int i=1;i&lt;=n;i++)//先输入初始的棋子 </span><br><span class="line">cout&lt;&lt;&quot;o&quot;;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">cout&lt;&lt;&quot;*&quot;;</span><br><span class="line">cout&lt;&lt;&quot;--&quot;&lt;&lt;endl; </span><br><span class="line">for(int i=2;i&lt;=n-3;i++)//从第2行到倒数第5行都有相同的规律 </span><br><span class="line">&#123;</span><br><span class="line">for(int j=n;j&gt;=i;j--)   </span><br><span class="line">cout&lt;&lt;&quot;o&quot;;</span><br><span class="line">cout&lt;&lt;&quot;--&quot;;</span><br><span class="line">for(int j=n;j&gt;=i;j--)  </span><br><span class="line">cout&lt;&lt;&quot;*&quot;;</span><br><span class="line">for(int j=1;j&lt;i;j++)</span><br><span class="line">cout&lt;&lt;&quot;o*&quot;;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">//每两行为一个周期，前后两行的空格位置换了一下 </span><br><span class="line">for(int j=n;j&gt;=i;j--)</span><br><span class="line">cout&lt;&lt;&quot;o&quot;;</span><br><span class="line">for(int j=n;j&gt;=i;j--)</span><br><span class="line">cout&lt;&lt;&quot;*&quot;;</span><br><span class="line">cout&lt;&lt;&quot;--&quot;;</span><br><span class="line">for(int j=1;j&lt;i;j++)</span><br><span class="line">cout&lt;&lt;&quot;o*&quot;;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">if(n&gt;4)//规律 </span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;&quot;ooo--***&quot;;</span><br><span class="line">for(int i=1;i&lt;=n-3;i++)</span><br><span class="line">cout&lt;&lt;&quot;o*&quot;;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;&quot;ooo*o**--*&quot;;</span><br><span class="line">for(int i=1;i&lt;=n-4;i++)//每一行都有固定的规律 </span><br><span class="line">cout&lt;&lt;&quot;o*&quot;;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&quot;o--*o**o&quot;;</span><br><span class="line">for(int i=1;i&lt;=n-3;i++)</span><br><span class="line">cout&lt;&lt;&quot;o*&quot;;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&quot;o*o*o*--&quot;;</span><br><span class="line">for(int i=1;i&lt;=n-3;i++)</span><br><span class="line">cout&lt;&lt;&quot;o*&quot;;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&quot;--&quot;;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">cout&lt;&lt;&quot;o*&quot;;</span><br><span class="line">   return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>总体来说还行，但是我不太坚定自己的选择，导致第一题的10分（QAQ），下次我会继续努力！</p>]]></content>
      
      
      <categories>
          
          <category> 竞赛笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sep的网站限时内测</title>
      <link href="//post/Sep%E7%9A%84%E7%BD%91%E7%AB%99%E9%99%90%E6%97%B6%E5%86%85%E6%B5%8B.html"/>
      <url>//post/Sep%E7%9A%84%E7%BD%91%E7%AB%99%E9%99%90%E6%97%B6%E5%86%85%E6%B5%8B.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="cbf121200cc3e359d3085e00723a41330ec557b5d26609327192ce481a5e5239">846ad8ec6e6943494449754732cecabbe0f684e7878dc2e58522a64e9c9649163154240cd6f55cd62ad3066438f774ca144f15fb70bb584730fdf8695da38fbc129802cce8784f4a5016c365744a88cad0ece74fee54ebf98700d48cfdf4b57987b946a85d8f11e57bed64ef6136ceaf078af880b194f408b2d849a7649edc13b64b21a9ce31c88c0ffacc31e174709c6b580d8ee5100c03fd5b888d71e624f6744ce622d140c4cf0c02558c6f1067fcb808d9d8f67f0a04d9efee14e9b5a4608b6f5ff0e5abfa350af96ff2fc7c373dd9e86f09d9271e8ab09cb1baa8173646b1f46e7d12f3772e587b675295c2aae1db5a8d90f143577e28964a53cce9aaff50db43c13040b9db8abf1cb41e811598a98694ececd30cc39c8fd7f5da8e88a856a21b0e720e0927340876e7759387df78a8badaf24588636c7902347d57000e2ce43aecc751288039439cc3738d92e9c18b234ebe800df18dba9f789425e0527531638d35ab41fd219b3216cf57deb97de92d29d194503860c0fda217bb88fd87426152432fe88f95ecad5194b1c387de5bec2c238962651e528189dbaf7bb7bd3576d7fbfcabca0f2280bce2293129b34b561363c1e129aa5f6a53eb3cddc2a13d35c240036561b32a7c5357ad8772a818e792bc5ffd42bf6aaa005de20fbc42e139ad6fa0a38842ac2d1f0589e3df23075a8b9c323cd8f370ab59f8acfb6dbc01c282075786ceb52c0827975cba431468ffdc2c2b926010d1db2fcd9fa8bd5ddb0f0b55e6c287d1c8221d76766bf26181e1e6ac92cc48da9613c0bd8fb770345013b513ca8afe572a1563dd91be3470a7b4c7ed83bd54f420f1e1b65748026cfb61675d1ea929a86106718a143bbab4bc588b400af6c5816151631549dc586c4d6906d38be8ef657cb72e10ecb12246db14a4036c6dff3e8ef0163b296cb69f515cbbe03fce71fe751a334bcda764b4d8abaddaee661b9c5d0d09ec5b05d45dd3d1a300e8d4190150f70326fb9966c99062fa60f6793cdb608b8a31f5066ac77a3825fd7fa86c9e610ce3fe243972f32c1bd7d0acfce1342bcae19ec9b3c1ef44912c8086d9d7d6456fdcc775052768d04109ebd1a30c07ca75e84492c25f0b31ffdc9649943a966ef1d75e407f23f5190fd0b4810228bac91d2c9b0393c888c2454530d766ada28a32aa36b847c80cad348fdaf1d41775bae99e313689be8afa92991507eb27fcf6a04855b2a6542e8ba1d579e6aa45bfea4662f7be0e09222e8212b80f6c84f6c700762fdfd6e656310ec0d7b78b5c39c0d175ba2c6dfb5599be8ca1ef9f5532421277a4bbe7e1be1890e665c8472e5cdb20a2d1815c9ca2ade54e56d24628541f6394651d50622467c6a1b9ea55bd559d03644eb1b9989e35787674356a2f494ad32e8c5b90f27cc2b4d46b8bb51cb8c058e79eb202e729c000827c720015f489f14b37c764ab79cf0e19529bf10001c935545c390f91566dfd4cff6ab2664e72093eb6080399e85ea42a877965d92855b9d3430ba3d5647fb9db9460ea0e69d79609c7a9f72089848c8e89785fc0c916b86689b72a20e076e12f79b4d565a9f6baf379dd90442cd1a6ce32858c8205be7f1b98c6cd6bf37039eacb5634ab0bab9f80fa0ea247db51095a22a971cf7cffdf47ad27c2c5800ff778ba5b623616ec3d63deb6777fe31009b3218c022b0d38a63297972c27a18178c0093fab5a3a567a77c2fdd57a21e625531e362fe6eb259b0de93a4b7ca8f8a740a100ecff5ad09a82a3c8be3a880a9d45fd478aff02c581c189f22929c8a880458caedccee07a71bb800bb01ff9336d4486faacce69583b8110f3ac05822227dd3e945275663569d5b8eb288038bdbc8c6595d0a398bd3c631d607a27b31881bc1dc91c04c75c55454caba981465e4b2f2e80d71c516d38df30b16a19b0106dc2812f19974c08ab245f3b8f0008d79216a403467de1a34c0b0854dd902c8e0069946f84304edcdac5e5d5fa21670229bf2f9ea58b9e234974b158016871079672a231dbfb90d3f45dbe6cf1e31d0e0487b76ecc7e1ba43fcacf4275469a215da6159ff057bc602d573c4f6cb1513a744bf11a587c0d2368fd0d9288433c0344bde2f2573402b144f72e54900bc4074f9d3068882f6f596e4c4a20facfd62bd3235da54ddff86e083b02fa4757e8863ca8f1c64cfecd86bb2f3d9c8b54e1a1b227ddba43f07ca10038c54657381ef1b6962df563754839851d0e07f1bd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 整活 </tag>
            
            <tag> Radmin LAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minecraft-Sep的竞赛笔记书</title>
      <link href="//post/Minecraft-Sep%E7%9A%84%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E4%B9%A6.html"/>
      <url>//post/Minecraft-Sep%E7%9A%84%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E4%B9%A6.html</url>
      
        <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>本作品的内容借鉴了<a href="https://www.luogu.com.cn/team/12013">中山市华辰实验中学</a>的信息学竞赛学案，同时感谢初一信竞队的<a href="https://www.luogu.com.cn/user/200518">谢老师</a>以及同学们给了我极大的帮助！</p><p>编写：<a href="https://www.luogu.com.cn/user/942118">Minecraft-Sep</a></p><p>图床代理：<a href="https://img.zshfoj.com/">img.zshfoj.com</a></p><p>老师：<a href="https://www.luogu.com.cn/user/200518">Mr.谢</a></p><p>如果有不足之处，敬请多加指正！谢谢！</p><h1 id="1-文件与结构体"><a href="#1-文件与结构体" class="headerlink" title="1.文件与结构体"></a>1.文件与结构体</h1><p><img src="https://img.zshfoj.com/7707e0a2e501c9bf80df368f62f66684f717e968048dda5e2e35041426ef25e5.png"></p><h1 id="2-队列"><a href="#2-队列" class="headerlink" title="2.队列"></a>2.队列</h1><p><img src="https://img.zshfoj.com/58820bdf86fe54db6ac3ec446f6b678c27e7d67e0cd76063f72a4ea733886a75.png"></p><p><img src="https://img.zshfoj.com/1e64e490e059d2dc538d9c5fa393029b90a15cdcff99eeafbab2aa35275834d1.png"></p><h1 id="4-栈"><a href="#4-栈" class="headerlink" title="4.栈"></a>4.栈</h1><p><img src="https://img.zshfoj.com/a759f1cf90390a3924c3d3584894eab6ce48781aa68e6aec2d8410822deeacfd.png"></p><h1 id="5-树与二叉树"><a href="#5-树与二叉树" class="headerlink" title="5.树与二叉树"></a>5.树与二叉树</h1><p><img src="https://img.zshfoj.com/e2353afcd18590147754377060696e22d5b447af12c500b6f89b444c7f9d8bb6.png"></p><p><img src="https://img.zshfoj.com/e6fa7d0b66a7883fce3c275f9b28a2d3b224e20743b15e0fb2c23375bbb433e8.png"></p><h1 id="6-算法（基础）"><a href="#6-算法（基础）" class="headerlink" title="6.算法（基础）"></a>6.算法（基础）</h1><p><img src="https://img.zshfoj.com/6b2100489d84c69aec228d4b2167a70b70c6b54ca3789c50a6b26afdfb5960ca.png"></p><p><img src="https://img.zshfoj.com/5f483ff11e35ed5b6305cb5bba2fe2ad3dafef1936b6c31f957b9d8b35accb5c.png"></p><p><img src="https://img.zshfoj.com/147acaaa3b5de438ce551a23c6065bb187b2b829e7434a418483a6d26df8bfbf.png"></p><p><img src="https://img.zshfoj.com/ef192208e5fa823da4ee6fa04df890a868e4d00b838c4e44d9a55002024cf3f2.png"></p><p><img src="https://img.zshfoj.com/a8fb9cd64e58d35ea5459ce3b7d7681e2e435fc3629543b3368a9af64f46b8a3.png"></p><h1 id="7-贪心、分治、DFS"><a href="#7-贪心、分治、DFS" class="headerlink" title="7.贪心、分治、DFS"></a>7.贪心、分治、DFS</h1><p><img src="https://img.zshfoj.com/a4cc429450baa6d64f25fbb034203fa0f5e417aca78f28a08c44f97f27935655.png"></p><p><img src="https://img.zshfoj.com/1bf4d006e19963a7436fbf9c6a2a9a44c046fa135a1e3bc477641889a334867d.png"></p><p><img src="https://img.zshfoj.com/3bffeb8ea33de6342ec4f7488dfa91dadbf7a19960905303963633ca673cc524.png"></p><p><img src="https://img.zshfoj.com/72f6d60a8cf77c3e4bebe5e5a207e2a67882692bcf5a62735c5485b4b833fcd2.png"></p><h1 id="8-递归与递推"><a href="#8-递归与递推" class="headerlink" title="8.递归与递推"></a>8.递归与递推</h1><p><img src="https://img.zshfoj.com/984a1e35f8cec62ed4515cac4c18339287c0319889a3b329b76119cc94426998.png"></p><p><img src="https://img.zshfoj.com/e3788583d403db574783a889a50a38d52e0c736a97c71192cd6b4e53d5612f7b.png"></p><h1 id="9-BFS"><a href="#9-BFS" class="headerlink" title="9.BFS"></a>9.BFS</h1><p><img src="https://img.zshfoj.com/45ed44773337856930c2bb06f9254cc58227d386e567b6c3c1fa9190ac0b4925.png"></p><p><img src="https://img.zshfoj.com/c153965a49b0eaf5feb77deaa030670be87876ab9d8630044241ea2f88d67961.png"></p><p><img src="https://img.zshfoj.com/75781dd2d170243ab0c67a16b7afcd96cad49d3ca8272e219b31dd226a043261.png"></p><p><img src="https://img.zshfoj.com/376dc19c6f7302d10060fde3285dc16a85a0f674b75eab7e405e47f80d953011.png"></p><p><img src="https://img.zshfoj.com/566c19308b208c54b575b5f35a4981777e0bf6b8526171ec98cad82502a78b6b.png"></p><p><img src="https://img.zshfoj.com/7e1b66de2f16cd0914b7b022f2e6e3840ea0d7698cb9a4a3fee0df1be3849de6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 竞赛笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 信息竞赛书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++七大经典排序算法详解</title>
      <link href="//post/CPP%E4%B8%83%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3.html"/>
      <url>//post/CPP%E4%B8%83%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-七大经典排序算法详解（转）"><a href="#C-七大经典排序算法详解（转）" class="headerlink" title="C++七大经典排序算法详解（转）"></a>C++七大经典排序算法详解（转）</h1><p>前言：排序是将一组数据，按照指定的顺序或要求来进行排列的过程。是数据结构相关课程和内容较为重要和核心的内容之一，常常作为考试题和面试题目来考察学生和面试者，因此熟练掌握经典的<a href="https://so.csdn.net/so/search?q=%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95&spm=1001.2101.3001.7020">排序算法</a>原理和代码实现是非常重要的<br>本文介绍了几大较为经典的排序算法：插入、希尔、选择、堆、冒泡、快速和归并排序</p><p>各种排序算法动图解析<a href="https://www.cnblogs.com/onepixel/articles/7674659.html">请参考</a></p><p><img src="https://img.zshfoj.com/202ceb2dbe9af3db167f6e079a4317160c7181050244f2d7e6c6bc76bb4ade42.png" alt="202ceb2dbe9af3db167f6e079a4317160c7181050244f2d7e6c6bc76bb4ade42.png (1355×904) (zshfoj.com)"></p><p><strong>各种排序算法复杂度对比</strong><br><a href="https://so.csdn.net/so/search?q=%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F&spm=1001.2101.3001.7020">冒泡排序</a>：两两比较，将大的元素不断后移；<br>选择排序：在一次遍历中，选择最小的元素，和从起始位置开始的元素交换；<br>插入排序：选择一个元素，若此元素比前一个元素大，while循环不断左移找到它的位置。<br>希尔排序：在插入排序的基础之上加入了一个gap步长进行排序<br>归并排序：数组分治，将有序的子数组合并<br>快速排序：在数组中选择一个基准找到它的位置，接着从基准的两边采用同样的方法分治。<br>堆排序：先对整个数组构建大顶堆，接着从根节点开始不断调整。</p><h2 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h2><p>冒泡排序是所有排序算法中相对简单且容易理解的算法，它的核心思想：通过for循环不断遍历需要排序的元素，依次比较相邻的两个元素，若不满足指定的顺序（可以从大到小排序，也可以反过来），就交换两个元素，直至完成排序。</p><ul><li>1.比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>3.针对所有的元素重复以上的步骤，除了最后一个；</li><li>4.重复步骤1~3，直到排序完成。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">                    <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) </span><br><span class="line">&#123;</span><br><span class="line">                            <span class="type">int</span> temp = arr[j];</span><br><span class="line">                            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                        &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序优化："><a href="#冒泡排序优化：" class="headerlink" title="冒泡排序优化："></a><strong>冒泡排序优化：</strong></h4><p>用一个bool类型的变量来作为标志位，标记在某一轮遍历中是否发生过元素交换，如果未发生元素交换则证明当前数组已经排序完毕，直接中断此次循环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果用一个flag来判断当前数组是否已经有序,有序则退出循环</span></span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">                    <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) </span><br><span class="line">&#123;</span><br><span class="line">                            <span class="type">int</span> temp = arr[j];</span><br><span class="line">                            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><ul><li>1.初始状态：无序区为R[1…n]，有序区为空；</li><li>2.第i趟排序(i&#x3D;1,2,3…n-1)开始时，当前有序区和无序区分别为R[1…i-1]和R(i…n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1…i]和R[i+1…n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>3.n-1趟结束，数组有序化了。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> min = i;</span><br><span class="line"><span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; a[min])</span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> temp = a[min];</span><br><span class="line">a[min] = a[i];</span><br><span class="line">a[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><ul><li>1.从第一个元素开始，该元素可以认为已经被排序；</li><li>2.取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>3.如果该元素（已排序）大于新元素，将该元素移到下一位置；<br>-4.重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>5.将新元素插入到该位置后；</li><li>6.重复步骤2~5。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="comment">//第一个元素作为基准元素，从第二个元素开始把其插到正确的位置</span></span><br><span class="line">   &#123;</span><br><span class="line">  <span class="keyword">if</span>(a[i] &lt; a[i<span class="number">-1</span>]) <span class="comment">//如果第i个元素比前面的元素小</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">int</span> j = i<span class="number">-1</span>;     <span class="comment">//需要判断第i个元素与前面的多个元素的大小，换成j继续判断</span></span><br><span class="line">          <span class="type">int</span> x = a[i]; <span class="comment">//将第i个元素复制为哨兵</span></span><br><span class="line">      <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; x &lt; a[j]) <span class="comment">//找哨兵的正确位置，比哨兵大的元素依次后移</span></span><br><span class="line">      &#123;</span><br><span class="line">             a[j+<span class="number">1</span>] = a[j]; </span><br><span class="line">         j--;</span><br><span class="line">      &#125;</span><br><span class="line">      a[j+<span class="number">1</span>] = x;  <span class="comment">//把哨兵插入到正确的位置</span></span><br><span class="line">  &#125;   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。<br>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>1.选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk&#x3D;1；</li><li>2.按增量序列个数k，对序列进行k 趟排序；</li><li>3.每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span>  <span class="comment">//a -- 待排序的数组, n -- 数组的长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,gap;   <span class="comment">// gap为步长，每次减为原来的一半。</span></span><br><span class="line">    <span class="keyword">for</span> (gap = n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 共gap个组，对每一组都执行直接插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span> ;i &lt; gap; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i + gap; j &lt; n; j += gap) </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="comment">// 如果a[j] &lt; a[j-gap]，则寻找a[j]位置，并将后面数据的位置都后移。</span></span><br><span class="line">                <span class="keyword">if</span> (a[j] &lt; a[j - gap])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> tmp = a[j];</span><br><span class="line">                    <span class="type">int</span> k = j - gap;</span><br><span class="line">                    <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; a[k] &gt; tmp)</span><br><span class="line">                    &#123;</span><br><span class="line">                        a[k + gap] = a[k];</span><br><span class="line">                        k -= gap;</span><br><span class="line">                    &#125;</span><br><span class="line">                    a[k + gap] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellsort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> gap = n; gap &gt;= <span class="number">1</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; n; i += gap) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[i];</span><br><span class="line"><span class="type">int</span> pre = i - gap;</span><br><span class="line"><span class="keyword">while</span> (pre &gt;= <span class="number">0</span> &amp;&amp; arr[pre] &gt; temp) &#123;</span><br><span class="line">arr[i] = arr[pre];</span><br><span class="line">pre -= gap;</span><br><span class="line">&#125;</span><br><span class="line">arr[pre + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</p><ul><li>1.把长度为n的输入序列分成两个长度为n&#x2F;2的子序列；</li><li>2.对这两个子序列分别采用归并排序；</li><li>3.将两个排序好的子序列合并成一个最终的排序序列。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始版本，升序排序 */</span></span><br><span class="line"><span class="comment">/* 时间复杂度：O(nlbn) 将n个待排序记录归并次数为lbn，一趟归并O(n)</span></span><br><span class="line"><span class="comment">   空间复杂度：O(n) 递归栈最大深度为[lbn] + 1 ，而辅助数组大小为n</span></span><br><span class="line"><span class="comment">   稳定：无论最好还是最坏情况时间复杂度都是O(nlbn)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp[n]; <span class="comment">// 用一个额外的数组来进行排序</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>; <span class="comment">// 额外数组的起始位置</span></span><br><span class="line">    <span class="type">int</span> mid = n / <span class="number">2</span>; <span class="comment">// mid将数组从中间划分，前后两半都有序</span></span><br><span class="line">    <span class="type">int</span> first = <span class="number">0</span>, second = mid; <span class="comment">// 两个有序序列的起始位置</span></span><br><span class="line"> <span class="comment">//以下操作类似于将两个数组合并为一个有序数组</span></span><br><span class="line">    <span class="keyword">while</span> (first &lt; mid &amp;&amp; second &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[first] &lt;= arr[second]) <span class="comment">// 比较两个序列</span></span><br><span class="line">        <span class="comment">//这步操作相当于把第一个数组的值放到用来排序的数组，接着两个指针后移对下一个值进行操作</span></span><br><span class="line">            temp[b++] = arr[first++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp[b++] = arr[second++];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(first &lt; mid)  <span class="comment">// 将剩余子序列复制到辅助序列中</span></span><br><span class="line">            temp[b++] = arr[first++];</span><br><span class="line">    <span class="keyword">while</span>(second &lt; n)</span><br><span class="line">            temp[b++] = arr[second++];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="comment">// 辅助序列复制到原序列</span></span><br><span class="line">        arr[i] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="comment">// 递归出口</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MergeSort</span>(arr, n / <span class="number">2</span>); <span class="comment">// 对前半部分进行归并排序</span></span><br><span class="line">        <span class="built_in">MergeSort</span>(arr + n / <span class="number">2</span>, n - n / <span class="number">2</span>); <span class="comment">// 对后半部分进行归并排序</span></span><br><span class="line">        <span class="built_in">Merge</span>(arr, n); <span class="comment">// 归并两部分</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。<br>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ul><li>1.从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>2.重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>3.递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Quicksort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line"><span class="comment">//双指针，一个指向数组起始，一个指向数组末尾</span></span><br><span class="line"><span class="type">int</span> i = low;</span><br><span class="line"><span class="type">int</span> j = high;</span><br><span class="line"><span class="comment">//将数组的第一个元素作为key寻找它的位置</span></span><br><span class="line"><span class="comment">//key找到它的位置后，以它为分界线，左右两个数组分治</span></span><br><span class="line"><span class="type">int</span> key = arr[i];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line"><span class="comment">//两个指针不相遇，且指针指向的值大于key时，不断左移</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= key)</span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">if</span> (i &lt; j) arr[i] = arr[j];</span><br><span class="line"><span class="comment">//两个指针不相遇，且指针指向的值小于key时，不断右移</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= key)</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span> (i &lt; j) arr[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将key放在适合的位置</span></span><br><span class="line">arr[i] = key;</span><br><span class="line"><span class="comment">//分治</span></span><br><span class="line"><span class="built_in">Quicksort</span>(arr, low, i - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">Quicksort</span>(arr, i + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h2><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><ul><li>1.将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>2.将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;&#x3D;R[n]；</li><li>3.由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Heapsort.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> a, <span class="type">int</span> b)</span><span class="comment">//交换元素；</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = arr[a];</span><br><span class="line">arr[a] = arr[b];</span><br><span class="line">arr[b] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i, <span class="type">int</span> length)</span><span class="comment">//调整大顶堆（仅是调整过程，建立在大顶堆已构建的基础上）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = arr[i];<span class="comment">//先取出当前元素i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = i * <span class="number">2</span> + <span class="number">1</span>; k&lt;length; k = k * <span class="number">2</span> + <span class="number">1</span>)<span class="comment">//从i结点的左子结点开始，也就是2i+1处开始</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k + <span class="number">1</span>&lt;length&amp;&amp;arr[k]&lt;arr[k + <span class="number">1</span>])<span class="comment">//如果左子结点小于右子结点，k指向右子结点</span></span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[k] &gt;temp)<span class="comment">//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）</span></span><br><span class="line">&#123;</span><br><span class="line">arr[i] = arr[k];</span><br><span class="line">i = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = temp;<span class="comment">//将temp值放到最终的位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Heapsort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.构建大顶堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从第一个非叶子结点从下至上，从右至左调整结构</span></span><br><span class="line"><span class="built_in">adjustHeap</span>(arr, i, length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = length - <span class="number">1</span>; j&gt;<span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(arr, <span class="number">0</span>, j);<span class="comment">//将堆顶元素与末尾元素进行交换</span></span><br><span class="line"><span class="built_in">adjustHeap</span>(arr, <span class="number">0</span>, j);<span class="comment">//重新对堆进行调整</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">Heapsort</span>(arr, <span class="number">9</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">9</span>; i++)</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024竞赛笔记合集</title>
      <link href="//post/2024%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E5%90%88%E9%9B%86.html"/>
      <url>//post/2024%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E5%90%88%E9%9B%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="这里是2024竞赛笔记合集！"><a href="#这里是2024竞赛笔记合集！" class="headerlink" title="这里是2024竞赛笔记合集！"></a>这里是2024竞赛笔记合集！</h1><div class="tip info"><p>以后的竞赛笔记将不再更新在主页，将更新在此处！</p></div><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>1月</p></div></div><div class='timeline-item-content'><div class="btns circle grid5">            <p><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-15竞赛笔记' title='01-15'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-15</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-16竞赛笔记' title='01-16'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-16</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-17竞赛笔记' title='01-17'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-17</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-18竞赛笔记' title='01-18'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-18</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-19竞赛笔记' title='01-19'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-19</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-20自学笔记' title='01-20'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-20</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-21自学笔记' title='01-21'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-21</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-22竞赛笔记' title='01-22'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-22</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-23竞赛笔记' title='01-23'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-23</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-24竞赛笔记' title='01-24'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-24</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-01-25竞赛笔记' title='01-25'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>01-25</a></p><pre><code>      &lt;/div&gt;</code></pre></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>4月</p></div></div><div class='timeline-item-content'><div class="btns circle grid5">            <p><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-04竞赛笔记' title='03-04'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-04</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-05竞赛笔记' title='03-05'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-05</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-06竞赛笔记' title='03-06'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-06</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-18竞赛笔记' title='03-18'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-18</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-20竞赛笔记' title='03-20'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-20</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-21竞赛笔记' title='03-21'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-21</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-22竞赛笔记' title='03-22'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-22</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-25竞赛笔记' title='03-25'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-25</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-26竞赛笔记' title='03-26'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-26</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-27竞赛笔记' title='03-27'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-27</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-03-28竞赛笔记' title='03-28'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>03-28</a></p><pre><code>      &lt;/div&gt;</code></pre></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>4月</p></div></div><div class='timeline-item-content'><div class="btns circle grid5">            <p><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-04-08竞赛笔记' title='04-08'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>04-08</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-04-10竞赛笔记' title='04-10'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>04-10</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-04-11竞赛笔记' title='04-11'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>04-11</a><br><a class="button no-text-decoration" href='/2024竞赛笔记/posts/2024-04-12竞赛笔记' title='04-12'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>04-12</a></p><pre><code>      &lt;/div&gt;</code></pre></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 竞赛笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GESP编程能力等级认证标四级（复习要点）</title>
      <link href="//post/GESP%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B%E7%AD%89%E7%BA%A7%E8%AE%A4%E8%AF%81%E6%A0%87%E5%9B%9B%E7%BA%A7%EF%BC%88%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9%EF%BC%89.html"/>
      <url>//post/GESP%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B%E7%AD%89%E7%BA%A7%E8%AE%A4%E8%AF%81%E6%A0%87%E5%9B%9B%E7%BA%A7%EF%BC%88%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9%EF%BC%89.html</url>
      
        <content type="html"><![CDATA[<h1 id="2023-12-8-个人笔记"><a href="#2023-12-8-个人笔记" class="headerlink" title="2023&#x2F;12&#x2F;8 个人笔记"></a>2023&#x2F;12&#x2F;8 个人笔记</h1><h3 id="主题：GESP编程能力等级认证标四级（复习要点）"><a href="#主题：GESP编程能力等级认证标四级（复习要点）" class="headerlink" title="主题：GESP编程能力等级认证标四级（复习要点）"></a>主题：GESP编程能力等级认证标四级（复习要点）</h3><p><strong>考试大纲</strong></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/gcx46xwf.png"></p><p><strong>知识点复习</strong></p><h3 id="1-形参和实参"><a href="#1-形参和实参" class="headerlink" title="1.形参和实参"></a>1.形参和实参</h3><p>定义：</p><p>形参：形参出现在函数定义中，在整个函数体内都可以使用，离开该函数则不能使用。<br>实参：实参出现在主调函数中，进入被调函数后，实参变量也不能使用。</p><p>网上很多大佬都是这么讲的，认为举个例子更容易理解：</p><p>假设定义了这样一个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在主函数中这么调用它</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">f</span>(n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>那么int f(int x)中的 x x x就是形参（在函数中定义，并只能在此函数中使用的参数）</li><li>主函数中f(n)的 n n n就是实参（将数据传入函数中的参数）</li></ul><hr><ol start="2"><li>作用域</li></ol><p>作用域，顾名思义，就是变量或常量的作用范围（可使用范围）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; k;<span class="comment">//这句话的作用域就是当前行，仅在当前行执行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">……</span><br><span class="line">cout &lt;&lt; k;   <span class="comment">//加入花括号后，这句话的作用范围就变到了这个for循环语句内，即两个花括号以内</span></span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-函数的定义和调用"><a href="#2-函数的定义和调用" class="headerlink" title="2.函数的定义和调用"></a>2.函数的定义和调用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(返回值类型) <span class="built_in">f</span>(自定义函数名) （<span class="function"><span class="type">int</span> <span class="title">x</span><span class="params">(形参列表)</span>）</span>&#123;</span><br><span class="line"></span><br><span class="line">      主体</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">x</span>(表达式);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>返回值类型 ：一个函数可以返回一个值的类型</li><li>函数名：给函数起的自定义名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><h3 id="3-排序的概念和稳定性"><a href="#3-排序的概念和稳定性" class="headerlink" title="3.排序的概念和稳定性"></a>3.排序的概念和稳定性</h3><table><thead><tr><th align="center">排序算法</th><th align="center">时间复杂度</th><th align="center">空间复杂度</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">冒泡</td><td align="center">$O ( n 2 ) O(n^2) O(n2)$</td><td align="center">$O ( 1 ) O(1) O(1)$</td><td align="center">稳定</td></tr><tr><td align="center">插入</td><td align="center">$O ( n 2 ) O(n^2) O(n2)$</td><td align="center">$O ( 1 ) O(1) O(1)$</td><td align="center">稳定</td></tr><tr><td align="center">选择</td><td align="center">$O ( n 2 ) O(n^2) O(n2)$</td><td align="center">$O ( 1 ) O(1) O(1)$</td><td align="center">不稳定</td></tr></tbody></table><h3 id="4-文件重定向与文件读写"><a href="#4-文件重定向与文件读写" class="headerlink" title="4.文件重定向与文件读写"></a>4.文件重定向与文件读写</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;a.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin)<span class="comment">//将输入重定向为从文件a.in读入</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;a.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)<span class="comment">//将输出重定向为从输出到文件a.out中</span></span><br><span class="line"><span class="comment">//下面的程序任然使用标准输入输出（scanf，printf）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="function">ifstream <span class="title">cin</span><span class="params">(<span class="string">&quot;a.in&quot;</span>)</span></span>;<span class="comment">//在main（）函数里定义较好</span></span><br><span class="line"><span class="function">ofsteam <span class="title">cout</span><span class="params">(<span class="string">&quot;a.out&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//下面标准输入输出</span></span><br></pre></td></tr></table></figure><h3 id="5-冒泡、选择、插入排序"><a href="#5-冒泡、选择、插入排序" class="headerlink" title="5. 冒泡、选择、插入排序"></a>5. 冒泡、选择、插入排序</h3><h3 id="一、冒泡"><a href="#一、冒泡" class="headerlink" title="一、冒泡"></a>一、冒泡</h3><p><strong>定义</strong></p><ul><li>冒泡排序（英语：Bubble sort）是一种简单的排序算法。由于在算法的执行过程中，较小的元素像是气泡般慢慢「浮」到数列的顶端，故叫做冒泡排序</li></ul><p><strong>过程</strong></p><ul><li><p>它的工作原理是每次检查相邻两个元素，如果前面的元素与后面的元素满足给定的排序条件，就将相邻两个元素交换。当没有相邻的元素需要交换时，排序就完成了。</p></li><li><p>经过 $i$ 次扫描后，数列的末尾 $i$ 项必然是最大的 $i$ 项，因此冒泡排序最多需要扫描 $n-1$ 遍数组就能完成排序。</p></li></ul><p><strong>性质</strong></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/a32vty0q.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qxames0h.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设数组的大小是 n + 1，冒泡排序从数组下标 1 开始</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> t = a[i];</span><br><span class="line">        a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">        a[i + <span class="number">1</span>] = t;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、选择"><a href="#二、选择" class="headerlink" title="二、选择"></a>二、选择</h3><p><strong>定义</strong><br>选择排序（英语：Selection sort）是一种简单直观的排序算法。它的工作原理是每次找出第 $i$ 小的元素（也就是 $A_{i..n}$ 中最小的元素），然后将这个元素与数组第 i 个位置上的元素交换。</p><p><img src="https://oi-wiki.org/basic/images/selection-sort-animate.svg"></p><p><strong>性质</strong></p><ul><li><p>稳定性 由于 swap（交换两个元素）操作的存在，选择排序是一种不稳定的排序算法。</p></li><li><p>时间复杂度 选择排序的最优时间复杂度、平均时间复杂度和最坏时间复杂度均为 $O(n^2)$。</p></li></ul><p><strong>代码实现</strong></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/fty5rs2j.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selection_sort</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> ith = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (a[j] &lt; a[ith]) &#123;</span><br><span class="line">        ith = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">swap</span>(a[i], a[ith]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、插入"><a href="#三、插入" class="headerlink" title="三、插入"></a>三、插入</h3><p><strong>定义</strong></p><ul><li><p>插入排序（英语：Insertion sort）是一种简单直观的排序算法。它的工作原理为将待排列元素划分为「已排序」和「未排序」两部分，每次从「未排序的」元素中选择一个插入到「已排序的」元素中的正确位置。</p></li><li><p>一个与插入排序相同的操作是打扑克牌时，从牌桌上抓一张牌，按牌面大小插到手牌后，再抓下一张牌。</p></li></ul><p><img src="https://oi-wiki.org/basic/images/insertion-sort-animate.svg"></p><p><strong>性质</strong></p><ul><li><p>稳定性  插入排序是一种稳定的排序算法。</p></li><li><p>时间复杂度  插入排序的最优时间复杂度为 $O(n)$，在数列几乎有序时效率很高。插入排序的最坏时间复杂度和平均时间复杂度都为 $O(n^2)$。</p></li></ul><p><strong>代码实现</strong></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/sh9hfkoo.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> key = arr[i];</span><br><span class="line">    <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">      arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j + <span class="number">1</span>] = key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>折半插入排序</strong></p><ul><li><p>插入排序还可以通过二分算法优化性能，在排序元素数量较多时优化的效果比较明显。</p></li><li><p>时间复杂度  折半插入排序与直接插入排序的基本思想是一致的，折半插入排序仅对插入排序时间复杂度中的常数进行了优化，所以优化后的时间复杂度仍然不变。</p></li></ul><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i != len; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> key = arr[i];</span><br><span class="line">    <span class="keyword">auto</span> index = <span class="built_in">upper_bound</span>(arr, arr + i, key) - arr;</span><br><span class="line">    <span class="comment">// 使用 memmove 移动元素，比使用 for 循环速度更快，时间复杂度仍为 O(n)</span></span><br><span class="line">    <span class="built_in">memmove</span>(arr + index + <span class="number">1</span>, arr + index, (i - index) * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    arr[index] = key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> GESP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023.11.21初一周赛总结</title>
      <link href="//post/2023-11-21%E5%88%9D%E4%B8%80%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93.html"/>
      <url>//post/2023-11-21%E5%88%9D%E4%B8%80%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="2023-11-21初一欢乐周赛"><a href="#2023-11-21初一欢乐周赛" class="headerlink" title="2023.11.21初一欢乐周赛"></a>2023.11.21初一欢乐周赛</h1><p><strong>总叙</strong>:思路差不多懂，但就是不会写</p><hr><h3 id="P1165-日志分析"><a href="#P1165-日志分析" class="headerlink" title="P1165 日志分析"></a>P1165 日志分析</h3><p><strong>题目链接</strong>：<a href="https://www.luogu.com.cn/problem/P1165">P1165</a></p><p><strong>考点</strong>：模拟，线性数据结构，栈</p><p><strong>难点</strong>：我们设a[i]为栈中从下到上的i个元素中的最大值，当我们加入一个新元素x时，t++，a[t]&#x3D;max(a[t-1],x)。那么在出栈时只要输出a[t-1]，在查找时只要输出a[t]</p><p><strong>比赛时自己的思路</strong>：插入、删除、查询栈</p><p><strong>结果</strong>：$ {\color{red} Unaccept}$</p><p><strong>正确代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> s[<span class="number">20000000</span>],a[<span class="number">20000000</span>],top,k;</span><br><span class="line"><span class="type">int</span> n,t,x;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(top==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;a[k]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">0</span>)<span class="comment">//入栈</span></span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">s[++top]=x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;a[k])<span class="comment">//a是辅助站，保存最大值 </span></span><br><span class="line">a[k+<span class="number">1</span>]=x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[k+<span class="number">1</span>]=a[k];<span class="comment">//当前最大值入栈 </span></span><br><span class="line">k++; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span>(t==<span class="number">1</span>)<span class="comment">//出栈 </span></span><br><span class="line"> &#123;</span><br><span class="line"><span class="keyword">if</span>(top!=<span class="number">0</span> &amp;&amp; k!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">top--,k--;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">2</span>) <span class="built_in">cx</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><hr><h3 id="P4387-【深基15-习9】验证栈序列"><a href="#P4387-【深基15-习9】验证栈序列" class="headerlink" title="P4387 【深基15.习9】验证栈序列"></a>P4387 【深基15.习9】验证栈序列</h3><p><strong>题目链接</strong>：<a href="https://www.luogu.com.cn/problem/P4387">P4387</a></p><p><strong>考点</strong>：栈</p><p><strong>难点</strong>：入栈（push（））、是否栈空（empty（））、访问栈顶（top（））、出栈（pop（））</p><p><strong>比赛时自己的思路</strong>：想不明白</p><p><strong>结果</strong>：$ {\color{red} Unaccept}$</p><h2 id="正确代码："><a href="#正确代码：" class="headerlink" title="正确代码："></a><strong>正确代码</strong>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> q,n,a[<span class="number">100010</span>],b[<span class="number">100010</span>];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;q;</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span> b);</span><br><span class="line"><span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">s.<span class="built_in">push</span>(a[i]);</span><br><span class="line"><span class="keyword">while</span>(s.<span class="built_in">top</span>()==b[t])</span><br><span class="line">&#123;</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">empty</span>()) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!s.<span class="built_in">empty</span>()) cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">while</span>(!s.<span class="built_in">empty</span>()) s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h3 id="P9748-CSP-J-2023-小苹果"><a href="#P9748-CSP-J-2023-小苹果" class="headerlink" title="P9748 [CSP-J 2023] 小苹果"></a>P9748 [CSP-J 2023] 小苹果</h3><p><strong>题目链接</strong>：<a href="https://www.luogu.com.cn/problem/P9748">P9748</a></p><p><strong>考点</strong>：栈，O2</p><p><strong>难点</strong>：每次拿去  $n&#x2F;3$ 个苹果，而如果此时 $n % 3$  刚好为一，则这一天也可以拿走第 $n$ 个苹果</p><p><strong>比赛时自己的思路</strong>：栈逐一判断苹果树，记录</p><p><strong>结果</strong>：$ {\color{red} Unaccept}$</p><p><strong>正确代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,t=<span class="number">0</span>,s=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(!ans&amp;&amp;n%<span class="number">3</span>==<span class="number">1</span>) ans=s;</span><br><span class="line">t=<span class="built_in">ceil</span>(<span class="number">1.0</span>*n/<span class="number">3</span>);</span><br><span class="line">n=n-t;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;s<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>对于我来说挺难的，还要加倍努力</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023.10.27初一编程马拉松赛赛后总结</title>
      <link href="//post/2023-10-27%E5%88%9D%E4%B8%80%E7%BC%96%E7%A8%8B%E9%A9%AC%E6%8B%89%E6%9D%BE%E8%B5%9B%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93.html"/>
      <url>//post/2023-10-27%E5%88%9D%E4%B8%80%E7%BC%96%E7%A8%8B%E9%A9%AC%E6%8B%89%E6%9D%BE%E8%B5%9B%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<p>总分：<strong>273</strong></p><p>总叙：有亿点难（太菜了），发挥的不好，学过的知识点运用不好</p><hr><h3 id="P1003-NOIP2011-提高组-铺地毯"><a href="#P1003-NOIP2011-提高组-铺地毯" class="headerlink" title="P1003 [NOIP2011 提高组] 铺地毯"></a>P1003 [NOIP2011 提高组] 铺地毯</h3><p><strong>题目链接</strong>：<a href="https://www.luogu.com.cn/problem/P1003?contestId=141914">P1003</a></p><p><strong>考点</strong>：(<strong>模拟题</strong>）从后往前枚举地毯（因为后覆盖的地毯在上面，而题目正好要求最上面的地毯），如果有一个地毯满足条件（满足什么条件在下面讲解）就直接输出，并退出。如果没有地毯满足条件，就输出-1</p><p><strong>难点</strong>：<strong>模拟，枚举</strong></p><p><strong>比赛时自己的思路</strong>：先输入数据，找地毯覆盖的位置，累加cnt</p><p><strong>情况</strong>：$\mathbf\color{red} WA$</p><p>正确解法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">114514</span>],b[<span class="number">114514</span>],x[<span class="number">114514</span>],y[<span class="number">114514</span>],n,sx,sy,ans=<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//初始化ans为-1 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;sx&gt;&gt;sy;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=sx&amp;&amp;b[i]&lt;=sy&amp;&amp;x[i]+a[i]&gt;=sx&amp;&amp;y[i]+b[i]&gt;=sy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断是否覆盖所求的点</span></span><br><span class="line">ans=i; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="P1031-NOIP2002-提高组-均分纸牌"><a href="#P1031-NOIP2002-提高组-均分纸牌" class="headerlink" title="P1031 [NOIP2002 提高组] 均分纸牌"></a>P1031 [NOIP2002 提高组] 均分纸牌</h3><p><strong>题目链接</strong>：<a href="https://www.luogu.com.cn/problem/P1031?contestId=141914">P1031</a></p><p><strong>考点</strong>：<strong>（模拟，贪心）</strong> 每堆牌只能移到相邻的堆，一堆堆处理，且只考虑后一堆</p><p><strong>难点</strong>：贪心算法</p><p><strong>比赛时自己的思路</strong>：平分每一堆得纸牌</p><p><strong>结果</strong>：$\mathbf\color{red} WA$</p><p><strong>正确解法</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOR(i,n,m) for(int i=n;i&lt;=m;i++)<span class="comment">//宏定义节省代码长度</span></span></span><br><span class="line"><span class="type">int</span> n,a[<span class="number">110</span>],c[<span class="number">110</span>],p,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);<span class="built_in">FOR</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); <span class="comment">//读入</span></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n) c[i]=c[i<span class="number">-1</span>]+a[i];  <span class="comment">//求前缀和</span></span><br><span class="line">    p=c[n]/n; <span class="comment">//求平均数</span></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n<span class="number">-1</span>) <span class="keyword">if</span>(p*i!=c[i]) ans++;</span><br><span class="line">    <span class="comment">//当此时牌堆1-i总牌数!=i*总平均数，需要移动一次</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="P1055-NOIP2008-普及组-ISBN-号码"><a href="#P1055-NOIP2008-普及组-ISBN-号码" class="headerlink" title="P1055 [NOIP2008 普及组] ISBN 号码"></a>P1055 [NOIP2008 普及组] ISBN 号码</h3><p><strong>题目链接</strong>：<a href="https://www.luogu.com.cn/problem/P1055?contestId=141914">P1055</a></p><p><strong>考点</strong>：<strong>（模拟，字符串）</strong> 首先，可以把ISBN号码分割成三个int和一个char，用scanf输入，最后一位是char型是因为它可能是‘X’，然后将X换成10，依次分解，判断</p><p><strong>难点</strong>：字符串</p><p><strong>比赛时自己的思路</strong>：输入，分别为 <strong>int-int-int-char</strong>(char防止输入X,X换成10),分解每一个数的各个数位的数，分别乘起来，最后mod11,判断是否为正确结果，对输出“Yes”，不对就输出新的结果</p><p><strong>结果</strong>：$\mathbf\color{red} WA$</p><p><strong>正确结果</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,c,d,s=<span class="number">0</span>,m;</span><br><span class="line"><span class="type">char</span> d1;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d-%d-%c&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d1);</span><br><span class="line"><span class="keyword">if</span>(d1==<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">d=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">d=d1<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line">m=(a*<span class="number">1000</span>+b)*<span class="number">100000</span>+c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">s+=m%<span class="number">10</span>*(<span class="number">9</span>-i+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//s%=11;</span></span><br><span class="line">m/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">s%=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">if</span>(s==d)</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Right&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-%d-%d-&quot;</span>,a,b,c);</span><br><span class="line"><span class="keyword">if</span> (s==<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&#x27;X&#x27;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="P1102-A-B-数对"><a href="#P1102-A-B-数对" class="headerlink" title="P1102 A-B 数对"></a>P1102 A-B 数对</h3><p><strong>题目链接</strong>：<a href="https://www.luogu.com.cn/problem/P1102?contestId=141914">P1102</a></p><p><strong>考点</strong>：重复是算的， A-B&#x3D;C 那么 A-C&#x3D;B 所以就把A的个数累加，然后把A减去C就可以了，B的值的和就是答案。 当然MLE是可能得。所以绕一下做就行了。</p><p><strong>难点</strong>：模拟；数学；二分；排序；哈希, hash；双指针,two-pointer</p><p><strong>比赛时自己的思路</strong>：遍历数对，一个个数相减然后判断（当时也想着可能会RE或TLE）</p><p><strong>结果</strong>：WA(76pts)</p><p><strong>正确解法</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,k,a[<span class="number">200001</span>],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=n+<span class="number">1</span>,mid;</span><br><span class="line"><span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a[mid]&lt;=x)</span><br><span class="line">&#123;</span><br><span class="line">l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r=mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">far</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=n+<span class="number">1</span>,mid;</span><br><span class="line"><span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a[mid]&lt;x)</span><br><span class="line">&#123;</span><br><span class="line">l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r=mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">ans+=<span class="built_in">fun</span>(a[i]+k)-<span class="built_in">far</span>(a[i]+k);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>考的不好，再努力</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023竞赛笔记合集</title>
      <link href="//post/2023%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E5%90%88%E9%9B%86.html"/>
      <url>//post/2023%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E5%90%88%E9%9B%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="这里是2023竞赛笔记合集！"><a href="#这里是2023竞赛笔记合集！" class="headerlink" title="这里是2023竞赛笔记合集！"></a>这里是2023竞赛笔记合集！</h1><div class="tip info"><p>以后的竞赛笔记将不再更新在主页，将更新在此处！</p></div><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2023</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12月</p></div></div><div class='timeline-item-content'><div class="btns circle grid5">            <p><a class="button no-text-decoration" href='/2023竞赛笔记/posts/20231206' title='12-06'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>12-06</a><br><a class="button no-text-decoration" href='/2023竞赛笔记/posts/20231208' title='12-08'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>12-08</a><br><a class="button no-text-decoration" href='/2023竞赛笔记/posts/20231211' title='12-11'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>12-11</a><br><a class="button no-text-decoration" href='/2023竞赛笔记/posts/20231212' title='12-12'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>12-12</a><br><a class="button no-text-decoration" href='/2023竞赛笔记/posts/20231223' title='12-23'><img src='https://krseoul.imgtbl.com/i/2024/05/09/663cb4390ed2e.png'>12-23</a></p><pre><code>      &lt;/div&gt;</code></pre></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 竞赛笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
